function updateClock() {
  const now = new Date();
  const hrs = String(now.getHours()).padStart(2, '0');
  const mins = String(now.getMinutes()).padStart(2, '0');
  const timeStr = `${hrs}:${mins}`;

  const el = document.querySelector('.watch');
  if (el) el.textContent = timeStr;
}

updateClock();
setInterval(updateClock, 1000);
function infoBanner(content = "Default message") {
  if (currentBanner) {
    hideBanner();
    showNew(content);
  } else {
    showNew(content);
  }
}

function showNew(content) {
  const banner = document.createElement("div");
  banner.className = "info-banner";
  banner.innerHTML = `
                <div class="left-stick"></div>
                <div class="white-board">
                    ${content}
                </div>
                <div class="right-stick"></div>
            `;
  document.body.appendChild(banner);
  currentBanner = banner;

  setTimeout(() => {
    banner.classList.add("bounce-in");
  }, 10);
}

function hideBanner() {
  if (currentBanner) {
    currentBanner.classList.remove("bounce-in");
    currentBanner.classList.add("bounce-out");
  }
}

// Track button hover state
let isHoveringButton = false;

const surpriseButtons = document.querySelectorAll(".surprise-button");
const face = document.querySelector(".face");
const eyes = document.querySelectorAll(".eye");
const mouth = document.querySelector(".mouth");
const eyelidLeft = document.querySelector(".eyelid-left");
const eyelidRight = document.querySelector(".eyelid-right");
const about_content = document.querySelector(".about-content");
const about_section = document.querySelector(".about-me");
const about_header = document.querySelector(".about-header");

face.addEventListener("click", () => {
  animation();
  setTimeout(() => {
    document.getElementById("home-section").classList.add("hide");
    about_section.classList.remove("hide");
    about_content.classList.remove("hide");
    about_header.classList.remove("hide");
    triggerAboutMeAnimation();
  }, 2000);
});

const surpriseDescriptions = {
  work: "You wanna see my WORK?!",
  linkedin: "YOU A RECRUITER ðŸ¤©?!!",
  email: "Shoot me an Email!",
  github: "Sure, you can have a look at my dead projects.",
};

document.querySelectorAll(".surprise-button").forEach((button) => {
  // Determine which button we're dealing with
  let id = button.id || "";

  // If the button is inside an <a>, use the image filename to infer purpose
  if (!id && button.querySelector("img")) {
    const src = button.querySelector("img").getAttribute("src");
    if (src.includes("linkedin")) id = "linkedin";
    else if (src.includes("email")) id = "email";
    else if (src.includes("github")) id = "github";
  } else if (!id && button.tagName === "IMG") {
    const src = button.getAttribute("src");
    if (src.includes("linkedin")) id = "linkedin";
    else if (src.includes("email")) id = "email";
    else if (src.includes("github")) id = "github";
  }

  const message = surpriseDescriptions[id];

  if (message) {
    button.addEventListener("mouseenter", () => {
      infoBanner(message);
    });

    button.addEventListener("mouseleave", () => {
      hideBanner();
    });
  }
});

face.addEventListener("mouseenter", () => {
  mouth.style.width = "20px";
  infoBanner("About Me??");
});

face.addEventListener("mouseleave", () => {
  mouth.style.width = "46px";
  hideBanner();
});

surpriseButtons.forEach((surpriseButton) =>
  surpriseButton.addEventListener("mouseenter", () => {
    isHoveringButton = true;

    eyelidLeft.style.border = "0px";
    eyelidRight.style.border = "0px ";
    // Transform eyes to hearts and grow
    eyes.forEach((eye) => {
      eye.style.borderRadius = "50% 50% 50% 50% / 60% 60% 40% 40%";
      eye.style.transform = " scale(1.5)";
      eye.style.height = "20px";
      eye.style.width = "20px";
      eye.style.transition = "all 0.1s ease-in-out";
    });

    // Transform mouth to filled black circle and grow
    mouth.style.borderRadius = "50%";
    mouth.style.backgroundColor = "black";
    mouth.style.transform = "scale(2)";
    mouth.style.transition = "all 0.1s ease-in-out";
    mouth.style.height = "15px";
    mouth.style.width = "15px";
  })
);

surpriseButtons.forEach((surpriseButton) =>
  surpriseButton.addEventListener("mouseleave", () => {
    isHoveringButton = false;

    eyelidLeft.style.border = "3px solid black";
    eyelidRight.style.border = "3px solid black";

    // Reset eyes
    eyes.forEach((eye) => {
      eye.style.borderRadius = "";
      eye.style.transform = "";
      eye.style.height = "20px";
      eye.style.width = "20px";
      eye.style.transition = "all 0.1s ease-in-out";
    });

    // Reset mouth
    mouth.style.borderRadius = "";
    mouth.style.backgroundColor = "";
    mouth.style.transform = "";
    mouth.style.transition = "all 0.1s ease-in-out";
    mouth.style.width = "46px";
    mouth.style.height = "";
    mouth.style.bottom = "30px";
  })
);

// Avatar Mouse Tracking Script
(function () {
  const glasses = document.querySelector(".eye-glass");
  const eyes = document.querySelectorAll(".eye");
  const eyelids = document.querySelectorAll(".eyelid-left, .eyelid-right");
  const mouth = document.querySelector(".mouth");
  const face = document.querySelector(".face");
  const hairBlobs = document.querySelectorAll(".blob");
  let last = { x: 0, y: 0, t: Date.now() };

  const eyeMaxOffsets = Array.from(eyes).map((eye, i) => {
    const lid = eyelids[i];
    const lidRect = lid.getBoundingClientRect();
    const eyeRect = eye.getBoundingClientRect();
    return (lidRect.width - eyeRect.width) / 2;
  });

  window.addEventListener("mousemove", (e) => {
    const now = Date.now();
    const dt = now - last.t || 16;
    const dx = e.clientX - last.x;
    const dy = e.clientY - last.y;
    const speed = Math.hypot(dx, dy) / dt;
    last = { x: e.clientX, y: e.clientY, t: now };

    const cx = window.innerWidth / 2;
    const cy = window.innerHeight / 2;
    const rx = (e.clientX - cx) / cx;
    const ry = (e.clientY - cy) / cy;

    // Determine direction multiplier based on button hover state
    const directionMultiplier = isHoveringButton ? 1 : -1;

    const faceX = directionMultiplier * rx * 4;
    const faceY = directionMultiplier * ry * 3;
    face.style.transform = `translate(${faceX}px, ${faceY}px)`;

    glasses.style.transform = `translate(${directionMultiplier * rx * 10}px, ${
      directionMultiplier * ry * 6
    }px)`;

    eyes.forEach((eye, i) => {
      // Only apply eye movement if not in heart mode
      if (!isHoveringButton) {
        eye.style.transform = `translateX(${
          directionMultiplier * rx * eyeMaxOffsets[i]
        }px)`;
      }
    });

    // Apply mouth movement with appropriate direction
    if (!isHoveringButton) {
      mouth.style.transform = `translate(${directionMultiplier * rx * 10}px, ${
        directionMultiplier * ry * 4
      }px)`;
    }
  });
})();

function toggleImage(container) {
  const img = container.querySelector(".project-image");
  const staticSrc = img.getAttribute("data-static");
  const gifSrc = img.getAttribute("data-gif");

  if (img.src.includes(staticSrc.split("/").pop())) {
    img.src = gifSrc;
    setTimeout(() => {
      img.src = staticSrc;
    }, 3000); // Show gif for 3 seconds
  }
}

// Enhanced hover effects
document.querySelectorAll(".image-container").forEach((container) => {
  const img = container.querySelector(".project-image");
  const staticSrc = img.getAttribute("data-static");
  const gifSrc = img.getAttribute("data-gif");

  container.addEventListener("mouseenter", () => {
    img.src = gifSrc;
  });

  container.addEventListener("mouseleave", () => {
    img.src = staticSrc;
  });
});

// Add smooth scrolling and intersection observer for animations
const observerOptions = {
  threshold: 0.1,
  rootMargin: "0px 0px -50px 0px",
};

const observer = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      entry.target.style.opacity = "1";
      entry.target.style.transform = "translateY(0)";
    }
  });
}, observerOptions);

// Observe all project cards
document.querySelectorAll(".project-card").forEach((card) => {
  card.style.opacity = "0";
  card.style.transform = "translateY(30px)";
  card.style.transition = "opacity 0.6s ease, transform 0.6s ease";
  observer.observe(card);
});

// Add click effects to tech tags
document.querySelectorAll(".tech-tag").forEach((tag) => {
  tag.addEventListener("click", () => {
    tag.style.transform = "scale(0.95)";
    setTimeout(() => {
      tag.style.transform = "translateY(-2px)";
    }, 150);
  });
});

// Add ripple effect to buttons
document.querySelectorAll(".project-link").forEach((button) => {
  button.addEventListener("click", function (e) {
    e.preventDefault();

    const ripple = document.createElement("span");
    const rect = this.getBoundingClientRect();
    const size = Math.max(rect.height, rect.width);
    const x = e.clientX - rect.left - size / 2;
    const y = e.clientY - rect.top - size / 2;

    ripple.style.width = ripple.style.height = size + "px";
    ripple.style.left = x + "px";
    ripple.style.top = y + "px";
    ripple.style.position = "absolute";
    ripple.style.borderRadius = "50%";
    ripple.style.background = "rgba(0, 0, 0, 0.3)";
    ripple.style.transform = "scale(0)";
    ripple.style.animation = "ripple 0.6s linear";
    ripple.style.pointerEvents = "none";

    this.appendChild(ripple);

    setTimeout(() => {
      ripple.remove();
    }, 600);
  });
});

const style = document.createElement("style");
style.textContent = `
            @keyframes ripple {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
            .project-link {
                position: relative;
                overflow: hidden;
            }
        `;
document.head.appendChild(style);

document.querySelectorAll(".skill-card").forEach((card) => {
  card.addEventListener("click", () => {
    card.classList.toggle("active");
  });
});

document.getElementById("work").addEventListener("click", () => {
  animation();

  setTimeout(() => {
    document.getElementById("home-section").classList.add("hide");
    document.getElementById("work-section").classList.remove("hide");

    const boxes = document.querySelectorAll(".work-section .video-box");
    boxes.forEach((box, index) => {
      setTimeout(() => {
        box.classList.add("visible");
      }, 100 * index);
    });
  }, 1000);
});

document.getElementById("home-button").addEventListener("click", () => {
  animation();

  setTimeout(() => {
    about_content.classList.add("hide");
    about_header.classList.add("hide");
    about_section.classList.add("hide");
    document.getElementById("work-section").classList.add("hide");
    document.getElementById("home-section").classList.remove("hide");
  }, 1000);
});

function animation() {
  document.querySelector(".pink").classList.add("expand");

  setTimeout(() => {
    document.querySelector(".white").classList.add("expand");
  }, 1000);

  setTimeout(() => {
    document.querySelector(".pink").classList.remove("expand");
    document.querySelector(".white").classList.remove("expand");
  }, 2000);
}

const dropdownToggle = document.querySelector(".dropdown-toggle");
const dropdownMenu = document.querySelector(".dropdown-menu");

// Toggle menu on toggle button click
dropdownToggle.addEventListener("click", (e) => {
  e.stopPropagation(); // Prevent bubbling to document
  dropdownMenu.classList.toggle("show");
});

// Close dropdown if clicking outside
document.addEventListener("click", (e) => {
  if (!dropdownMenu.contains(e.target) && !dropdownToggle.contains(e.target)) {
    dropdownMenu.classList.remove("show");
  }
});

// Optional: also close when clicking any link inside menu
document.querySelectorAll(".dropdown-menu a").forEach((link) => {
  link.addEventListener("click", () => {
    dropdownMenu.classList.remove("show");
  });
});

function triggerAboutMeAnimation() {
  const circle = document.querySelector(".profile-circle");
  const line = document.querySelector(".about-line");

  // Remove any existing animation classes
  circle.classList.remove("jelly-appear");
  line.classList.remove("line-expand");

  // Trigger reflow to restart animation
  void circle.offsetWidth;

  // Add animation classes
  circle.classList.add("jelly-appear");
  setTimeout(() => {
    line.classList.add("line-expand");
  }, 1000);
}

document.getElementById("about-button").addEventListener("click", () => {
  animation();

  setTimeout(() => {
    about_content.classList.remove("hide");
    about_header.classList.remove("hide");
    about_section.classList.remove("hide");
    document.getElementById("work-section").classList.add("hide");
    document.getElementById("home-section").classList.add("hide");
    triggerAboutMeAnimation();
  }, 1000);
});

document.addEventListener('DOMContentLoaded', () => {
  const videoBoxes = document.querySelectorAll('.video-box');

  videoBoxes.forEach((box) => {
    box.addEventListener('mouseenter', () => {
      videoBoxes.forEach(otherBox => {
        if (otherBox !== box) {
          otherBox.style.filter = 'brightness(0.4)'
        } else {
          otherBox.style.opacity = '1';
          otherBox.style.filter = 'brightness(1)'
          otherBox.style.transform = 'scale(1.08)';
          otherBox.style.zIndex = '2';
        }
      });
    });

    box.addEventListener('mouseleave', () => {
      videoBoxes.forEach(otherBox => {
        otherBox.style.opacity = '1';
        otherBox.style.transform = 'scale(1)';
        otherBox.style.filter = 'brightness(1)'
        otherBox.style.zIndex = '1';
      });
    });
  });
});




let currentBanner = null;

function infoBannerAppear(content = "Default message") {
  if (currentBanner) {
    hideBanner();
    showNewBanner(content)
  } else {
    showNewBanner(content);
  }
}

function showNewBanner(content) {
  const banner = document.createElement('div');
  banner.className = 'info-banner';
  banner.innerHTML = `
                <div class="left-stick"></div>
                <div class="white-board">
                    ${content}
                </div>
                <div class="right-stick"></div>
            `;
  document.body.appendChild(banner);
  currentBanner = banner;

  setTimeout(() => {
    banner.classList.add('bounce-in');
  }, 10);
}

function hideBanner() {
  if (currentBanner) {
    currentBanner.classList.remove('bounce-in');
    currentBanner.classList.add('bounce-out');
  }
}

window.addEventListener('load', () => {
  setTimeout(() => {
    infoBannerAppear('Hii There! Welcome!');
    setTimeout(() => {
      hideBanner();
    },5000);
  }, 1000);
});


const videoDescriptions = {
  "expense-tracker.mp4": "Track your expenses and visualize spending trends. Made with Reactjs.",
  "mighty-solutions.mp4": "Business website I built for a client.",
  "bothigh.mp4": "Automated Bots for your business, Integrated with Telegram, Whatsapp and Instagram available.",
  "literature-assistant.mp4": "Tool to assist in literary research and summarization. Uses RAG and LLMs.",
  "crossword.mp4": "Solve Crosswords with your friends online! Random Match making or custom rooms.",
  "linkedin-posting.mp4": "Automated LinkedIn post generator and scheduler.",
  "image-gallery.mp4": "Minimal image gallery with smooth transitions.",
  "switchhigh.mp4": "Business site builder for brands and startups.",
  "pastel-palette.mp4": "Color palette visualizer with pastel aesthetics.",
};

document.querySelectorAll("#work-section .video-box video").forEach((video) => {
  const src = video.getAttribute("src");
  const filename = src.split("/").pop(); // Get just the file name (e.g. 'bothigh.mp4')
  const description = videoDescriptions[filename] || "Project showcase.";

  video.addEventListener("mouseenter", () => {
    infoBannerAppear(description);
  });

  video.addEventListener("mouseleave", () => {
    hideBanner(); // Optional: you can choose to keep it visible if preferred
  });
});

document.getElementById("work-button").addEventListener("click", () => {
  animation();
  
  setTimeout(() => {
    document.getElementById("home-section").classList.add("hide");
    about_content.classList.add("hide");
    about_header.classList.add("hide");
    about_section.classList.add("hide");
    document.getElementById("work-section").classList.remove("hide");
  }, 1000);
});

document.getElementById("about-button").addEventListener("click", () => {
  
  animation();
  
  setTimeout(() => {
    document.getElementById("home-section").classList.add("hide");
    document.getElementById("work-section").classList.add("hide");
      about_content.classList.remove("hide");
  about_header.classList.remove("hide");
  about_section.classList.remove("hide");
  }, 1000);
});
